I"±"<h2 id="overview">Overview</h2>

<p>In Meta Box plugin, each field is built by a PHP class <code class="highlighter-rouge">RWMB_{$field_type}_Field</code>. This class extends the prime class - <code class="highlighter-rouge">RWMB_Field</code>. In other words, <code class="highlighter-rouge">RWMB_Field</code> is the prime class from which all fields are built on. <code class="highlighter-rouge">RWMB_Field</code> has all necessary methods for fields to use. Fields can overwrite these methods, change them for specific needs or add more methods if necessary.</p>

<div class="alert alert-info">
	
		<svg class="icon icon-info" aria-hidden="true" role="img"><use href="#icon-info" xlink:href="#icon-info"></use></svg>
	
	<p>All methods of this class (and its descendants) are <strong>static</strong>. It will make all fields use the same code instead of creating multiple class instances, thus increase pluginâ€™s performance.</p>

</div>

<h2 id="class-methods">Class methods</h2>

<h3 id="add_actions"><code class="highlighter-rouge">add_actions</code></h3>

<p>This method allows a field to add custom hooks for its needs. For example: callbacks for ajax call (<a href="https://github.com/wpmetabox/meta-box/blob/master/inc/fields/file.php#L29">like <code class="highlighter-rouge">file</code></a>), add hook to output custom content in admin footer (<a href="https://github.com/wpmetabox/meta-box/blob/master/inc/fields/file-advanced.php#L32">like <code class="highlighter-rouge">image_advanced</code></a>), etc. This method is called when the meta box is loaded. You can also add custom code to this method or calls to other functions which need to run when code is loaded. This method doesnâ€™t have any arguments.</p>

<h3 id="admin_enqueue_scripts"><code class="highlighter-rouge">admin_enqueue_scripts</code></h3>

<p>This method allows you to enqueue scripts and styles for a field. This method doesnâ€™t have any arguments.</p>

<h3 id="show"><code class="highlighter-rouge">show</code></h3>

<p>This method outputs fieldâ€™s HTML markup. Fields should <strong>not</strong> overwrite this method to output custom HTML. Instead of that, overwrite methods <code class="highlighter-rouge">html</code>, <code class="highlighter-rouge">begin_html</code>, <code class="highlighter-rouge">end_html</code> described below. This method has 2 arguments:</p>

<ul>
  <li><code class="highlighter-rouge">$field</code>: array of field arguments</li>
  <li><code class="highlighter-rouge">$saved</code>: a param used to detect whether this meta box is saved into database or not</li>
  <li><code class="highlighter-rouge">$post_id</code>: the current post ID</li>
</ul>

<h3 id="html"><code class="highlighter-rouge">html</code></h3>

<p>This method returns (not echoes, only returns) fieldâ€™s HTML markup. This is the input controls of the field and is put inside <code class="highlighter-rouge">.rwmb-input</code> CSS class. It can be filtered by <a href="/filters/"><code class="highlighter-rouge">rwmb_{$field_type}_html</code></a> and <a href="/filters/"><code class="highlighter-rouge">rwmb_{$field_id}_html</code></a> filters. Each field <strong>must</strong> overwrite this method to returns its HTML for inputs. This method has 2 arguments:</p>

<ul>
  <li><code class="highlighter-rouge">$meta</code>: field meta value</li>
  <li><code class="highlighter-rouge">$field</code>: array of field arguments</li>
</ul>

<h3 id="begin_html"><code class="highlighter-rouge">begin_html</code></h3>

<p>This method returns the beginning HTML output of a field. The beginning HTML output contains field name and opening tag for inputs. By default it is:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div class="rwmb-label"&gt;
    &lt;label for="{$field_id}"&gt;{$field_name}&lt;/label&gt;
&lt;/div&gt;
&lt;div class="rwmb-input"&gt;
</code></pre></div></div>

<p>This method should not be overwritten by fieldâ€™s class, unless itâ€™s needed to do so (<a href="https://github.com/wpmetabox/meta-box/blob/master/inc/fields/heading.php#L27">like <code class="highlighter-rouge">heading</code> field</a>). The return value of this function is filtered by <a href="/filters/"><code class="highlighter-rouge">rwmb_begin_html</code></a> filter (and its family). This method has 2 arguments:</p>

<ul>
  <li><code class="highlighter-rouge">$meta</code>: field meta value</li>
  <li><code class="highlighter-rouge">$field</code>: array of field arguments</li>
</ul>

<h3 id="end_html"><code class="highlighter-rouge">end_html</code></h3>

<p>This method returns the ending HTML output of a field. The ending HTML output contains clone button, field description and closing tag for inputs. By default it is:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{$clone_button}
{$field_description}
&lt;/div&gt; &lt;!-- .rwmb-input --&gt;
</code></pre></div></div>

<p>This method should not be overwritten by fieldâ€™s class, unless itâ€™s needed to do so (<a href="https://github.com/wpmetabox/meta-box/blob/master/inc/fields/heading.php#L40">like <code class="highlighter-rouge">heading</code> field</a>). The return value of this function is filtered by <a href="/filters/"><code class="highlighter-rouge">rwmb_end_html</code></a> filter (and its family). This method has 2 arguments:</p>

<ul>
  <li><code class="highlighter-rouge">$meta</code>: field meta value</li>
  <li><code class="highlighter-rouge">$field</code>: array of field arguments</li>
</ul>

<h3 id="meta"><code class="highlighter-rouge">meta</code></h3>

<p>This method retrieves meta value for a field. In most cases, this method does all the job of retrieving meta value of a field. But in some cases, a descendant class may overwrite this method to retrieve meta value for more complicated logic (<a href="https://github.com/wpmetabox/meta-box/blob/master/inc/fields/user.php#L95">like <code class="highlighter-rouge">user</code> field</a>). This method has 3 parameters:</p>

<ul>
  <li><code class="highlighter-rouge">$post_id</code>: current post ID, from which we retrieve meta value</li>
  <li><code class="highlighter-rouge">$saved</code>: a param used to detect whether this meta box is saved into database or not</li>
  <li><code class="highlighter-rouge">$field</code>: array of field arguments</li>
</ul>

<p>The returned value of this method is filtered by <a href="/filters/"><code class="highlighter-rouge">rwmb_field_meta</code></a> filter (and its family).</p>

<h3 id="value"><code class="highlighter-rouge">value</code></h3>

<p>This method set field meta value before saving in database. By default it just returns the value from <code class="highlighter-rouge">$_POST</code>. Field class can overwrite this method to set meta value for more complicated logic (<a href="https://github.com/wpmetabox/meta-box/blob/master/inc/fields/taxonomy-advanced.php#L54">like <code class="highlighter-rouge">taxonomy_advanced</code></a>). This method has 4 parameters:</p>

<ul>
  <li><code class="highlighter-rouge">$new</code>: field meta value which will be saved in the database</li>
  <li><code class="highlighter-rouge">$old</code>: old meta value of field</li>
  <li><code class="highlighter-rouge">$post_id</code>: current post ID, from which we retrieve meta value</li>
  <li><code class="highlighter-rouge">$field</code>: array of field arguments</li>
</ul>

<p>The returned value of this method is filtered by <a href="/filters/"><code class="highlighter-rouge">rwmb_{$field_type}_value</code></a> filter (and its family).</p>

<h3 id="save"><code class="highlighter-rouge">save</code></h3>

<p>This method saves field meta value in database. In most cases, this method does all the job of saving meta value of a field to database. But in some cases, a descendant class may overwrite this method to handle saving itself (<a href="https://github.com/wpmetabox/meta-box/blob/master/inc/fields/taxonomy.php#L237">like <code class="highlighter-rouge">taxonomy</code> field</a>). This method has 4 parameters:</p>

<ul>
  <li><code class="highlighter-rouge">$new</code>: field meta value which will be saved in the database</li>
  <li><code class="highlighter-rouge">$old</code>: old meta value of field</li>
  <li><code class="highlighter-rouge">$post_id</code>: current post ID, from which we retrieve meta value</li>
  <li><code class="highlighter-rouge">$field</code>: array of field arguments</li>
</ul>

<h3 id="normalize_field"><code class="highlighter-rouge">normalize_field</code></h3>

<p>This method normalizes field arguments, add missing arguments, add default value for fields, etc. Depends on field type, each field class can overwrite this method to define its own defaults value. This method has 1 parameter:</p>

<ul>
  <li><code class="highlighter-rouge">$field</code>: array of field arguments</li>
</ul>
:ET