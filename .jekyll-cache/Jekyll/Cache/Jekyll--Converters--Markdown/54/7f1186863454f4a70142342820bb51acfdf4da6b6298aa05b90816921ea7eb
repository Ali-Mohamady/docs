I"Ùç<h2 id="overview">Overview</h2>

<p>The <strong>Meta Box Conditional Logic</strong> extension is one of the most popular plugins of Meta Box. It helps you to show or hide meta boxes, custom fields or any elements based on other fields‚Äô values. Developers can control the relations between fields powerfully and create connections and perform any logic between them.</p>

<p>See this video below to understand how it works:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/m_FtbydM_-I?controls=0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>The extension is super useful when you want to:</p>

<ul>
  <li>Show a meta box only for a specific post format</li>
  <li>Show page settings (a meta box) for only a specific page template</li>
  <li>Show a group of fields when users select a specific value from a dropdown</li>
</ul>

<p>and a lot more.</p>

<p>You can also combine these options to build complex conditions. It works not only for meta boxes or custom fields, but also other HTML elements. It‚Äôs really powerful.</p>

<p>For more info, please see the <a href="https://metabox.io/plugins/meta-box-conditional-logic/">extension page</a>.</p>

<h2 id="installation">Installation</h2>
<p>Before installing the extension, you need to install Meta Box plugin first.</p>

<ol>
  <li>Go to <em>Plugins ‚Üí Add New</em> and search for <strong>Meta Box</strong></li>
  <li>Click <strong>Install Now</strong> button to install the plugin</li>
  <li>After installing, click <strong>Activate Plugin</strong> to activate the plugin</li>
</ol>

<p>The extension is just a WordPress plugin, you can install it like a normal WordPress plugin.</p>

<ol>
  <li>Go to <em>Plugins</em>, click <strong>Add new</strong>, then click <strong>Upload plugin</strong>.</li>
  <li>Choose the <code class="highlighter-rouge">.zip</code> file you downloaded and click <strong>Install now</strong></li>
  <li>After finishing upload, click <strong>Activate</strong> to finish.</li>
</ol>

<p>Like the Meta Box plugin, Conditional Logic was created without any options. You can start using it right after activating.</p>

<p>If you‚Äôre confused whilst reading this tutorial. Please refer to <a href="/creating-meta-boxes/">creating meta box</a>.</p>

<h2 id="getting-started">Getting started</h2>

<p>The code below registers a meta box that is hidden when the post format is <code class="highlighter-rouge">aside</code>. The meta box also have 2 custom fields: Brand and Product. The Product field will be hidden if user select a brand that‚Äôs not ‚ÄúApple‚Äù.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">add_filter</span><span class="p">(</span> <span class="s1">'rwmb_meta_boxes'</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span> <span class="nv">$meta_boxes</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nv">$meta_boxes</span><span class="p">[]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">'title'</span> <span class="o">=&gt;</span> <span class="s1">'Brands and Products'</span><span class="p">,</span>
        
        <span class="c1">// Hide this meta box when post format is aside</span>
        <span class="s1">'hidden'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'post_format'</span><span class="p">,</span> <span class="s1">'aside'</span> <span class="p">),</span>
        
        <span class="s1">'fields'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span>
                <span class="s1">'id'</span>    <span class="o">=&gt;</span> <span class="s1">'brand'</span><span class="p">,</span>
                <span class="s1">'name'</span>  <span class="o">=&gt;</span> <span class="s1">'Brand'</span><span class="p">,</span>
                <span class="s1">'desc'</span>  <span class="o">=&gt;</span> <span class="s1">'Pick Your Favourite Brand'</span><span class="p">,</span>
                <span class="s1">'type'</span>  <span class="o">=&gt;</span> <span class="s1">'select'</span><span class="p">,</span>
                <span class="s1">'options'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
                    <span class="s1">'Apple'</span>         <span class="o">=&gt;</span> <span class="s1">'Apple'</span><span class="p">,</span>
                    <span class="s1">'Google'</span>        <span class="o">=&gt;</span> <span class="s1">'Google'</span><span class="p">,</span>
                    <span class="s1">'Microsoft'</span>     <span class="o">=&gt;</span> <span class="s1">'Microsoft'</span>
                <span class="p">)</span>
            <span class="p">),</span>
            <span class="k">array</span><span class="p">(</span>
                <span class="s1">'id'</span>    <span class="o">=&gt;</span> <span class="s1">'apple_products'</span><span class="p">,</span>
                <span class="s1">'name'</span>  <span class="o">=&gt;</span> <span class="s1">'Which Apple product that you love?'</span><span class="p">,</span>
                <span class="s1">'type'</span>  <span class="o">=&gt;</span> <span class="s1">'radio'</span><span class="p">,</span>
                <span class="s1">'options'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
                    <span class="s1">'iPhone'</span>    <span class="o">=&gt;</span> <span class="s1">'iPhone'</span><span class="p">,</span>
                    <span class="s1">'iPad'</span>      <span class="o">=&gt;</span> <span class="s1">'iPad'</span><span class="p">,</span>
                    <span class="s1">'Macbook'</span>   <span class="o">=&gt;</span> <span class="s1">'Macbook'</span><span class="p">,</span>
                    <span class="s1">'iWatch'</span>    <span class="o">=&gt;</span> <span class="s1">'iWatch'</span>
                <span class="p">),</span>
                
                <span class="c1">// Hide this field when user selected a brand that's not 'Apple'</span>
                <span class="s1">'hidden'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'brand'</span><span class="p">,</span> <span class="s1">'!='</span><span class="p">,</span> <span class="s1">'Apple'</span> <span class="p">)</span>
            <span class="p">)</span>
        <span class="p">)</span>
    <span class="p">);</span>

    <span class="k">return</span> <span class="nv">$meta_boxes</span><span class="p">;</span>
<span class="p">}</span> <span class="p">);</span>
</code></pre></div></div>

<h2 id="syntax">Syntax</h2>

<p>To make a meta box or a field visible/hidden, please add a setting for the meta box or the field with the following syntax:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Condition to show.</span>
<span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'field'</span><span class="p">,</span> <span class="s1">'operator'</span><span class="p">,</span> <span class="s1">'value'</span> <span class="p">),</span>

<span class="c1">// Condition to hide</span>
<span class="s1">'hidden'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'field'</span><span class="p">,</span> <span class="s1">'operator'</span><span class="p">,</span> <span class="s1">'value'</span> <span class="p">)</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">field</code></td>
      <td>Meta Box field ID or ID of a DOM element to compare.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">operator</code></td>
      <td>Comparison operators: <code class="highlighter-rouge">=</code>, <code class="highlighter-rouge">&gt;=</code>, <code class="highlighter-rouge">&lt;=</code>, <code class="highlighter-rouge">&gt;</code>, <code class="highlighter-rouge">&lt;</code>, <code class="highlighter-rouge">!=</code>, <code class="highlighter-rouge">in</code>, <code class="highlighter-rouge">contains</code>, <code class="highlighter-rouge">between</code>, <code class="highlighter-rouge">starts with</code>, <code class="highlighter-rouge">ends with</code>, <code class="highlighter-rouge">match</code>. All of them can combine with <code class="highlighter-rouge">not</code> operator to become negate operator. Default: <code class="highlighter-rouge">=</code>. Optional.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">value</code></td>
      <td>Value to compare with.</td>
    </tr>
  </tbody>
</table>

<p>The normal operators like <code class="highlighter-rouge">=</code>, <code class="highlighter-rouge">!=</code>, etc. are pretty clear. Let‚Äôs see the advanced operators like <code class="highlighter-rouge">contains</code>, <code class="highlighter-rouge">starts with</code>, etc.</p>

<h2 id="advanced-operators">Advanced Operators</h2>

<h3 id="contains"><code class="highlighter-rouge">contains</code></h3>

<p>The operator <code class="highlighter-rouge">contains</code> can check if <strong>a field value contains another string or value</strong>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'brand'</span><span class="p">,</span> <span class="s1">'contains'</span><span class="p">,</span> <span class="s1">'pp'</span><span class="p">]</span> <span class="c1">// Apple, App, ...</span>
</code></pre></div></div>

<p>In case a field has multiple value (checkbox list, select multiple‚Ä¶), this operator checks <strong>if the field value (which is an array) contains a value</strong>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'brand'</span><span class="p">,</span> <span class="s1">'contains'</span><span class="p">,</span> <span class="s1">'Apple'</span><span class="p">];</span>
</code></pre></div></div>

<p>It also works with <code class="highlighter-rouge">taxonomy_advanced</code> field. In this case, please <strong>set the value to the term ID</strong>. For example, if you need to check if a taxonomy advanced field has a value:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'product_type'</span><span class="p">,</span> <span class="s1">'contains'</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span> <span class="c1">// 4 is a term ID.</span>
</code></pre></div></div>

<h3 id="in"><code class="highlighter-rouge">in</code></h3>

<p>This operator is used to check if <strong>a field value is in an array of specific values</strong>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'brand'</span><span class="p">,</span> <span class="s1">'in'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'Apple'</span><span class="p">,</span> <span class="s1">'Samsung'</span><span class="p">]];</span>
</code></pre></div></div>

<p>In case a field has multiple value (checkbox list, select multiple‚Ä¶), this operator checks if <strong>any of the field value is in the specified array</strong>. For example, if the <code class="highlighter-rouge">brand</code> field above is a <code class="highlighter-rouge">checkbox_list</code> field, then it will be visible if users select any of the value ‚ÄúApple‚Äù or ‚ÄúSamsung‚Äù:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'brand'</span><span class="p">,</span> <span class="s1">'in'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'Apple'</span><span class="p">,</span> <span class="s1">'Samsung'</span><span class="p">]];</span>
</code></pre></div></div>

<p>If you use with a <code class="highlighter-rouge">taxonomy_advanced</code> field, please <strong>set the value to the term IDs</strong>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'product_type'</span><span class="p">,</span> <span class="s1">'in'</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]];</span> <span class="c1">// The field will be visible if the product type has any term with ID 2 or 4.</span>
</code></pre></div></div>

<h3 id="between"><code class="highlighter-rouge">between</code></h3>

<p>This operator check if the field value is between minimum and maximum values.</p>

<p>Let say that we have a date field <code class="highlighter-rouge">released_date</code> and we want to show another field only when <code class="highlighter-rouge">released_date</code> is between ‚Äú2015-06-01‚Äù and ‚Äú2015-12-01‚Äù:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'released_date'</span><span class="p">,</span> <span class="s1">'between'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'2015-06-01'</span><span class="p">,</span> <span class="s1">'2015-12-01'</span> <span class="p">)</span> <span class="p">)</span>
</code></pre></div></div>

<p>Please note that the <code class="highlighter-rouge">between</code> operator does not only compare numeric fields but also date and time fields.</p>

<h3 id="starts-with"><code class="highlighter-rouge">starts with</code></h3>

<p>This operator checks if field value starts with a string:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'brand'</span><span class="p">,</span> <span class="s1">'starts with'</span><span class="p">,</span> <span class="s1">'App'</span> <span class="p">)</span> <span class="c1">// Apple, App</span>
</code></pre></div></div>

<h3 id="ends-with"><code class="highlighter-rouge">ends with</code></h3>

<p>This operator checks if field value ends with a string:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'brand'</span><span class="p">,</span> <span class="s1">'ends with'</span><span class="p">,</span> <span class="s1">'le'</span> <span class="p">)</span> <span class="c1">// Apple, Google</span>
</code></pre></div></div>

<h3 id="match"><code class="highlighter-rouge">match</code></h3>

<p>This operator checks if field value matches a regular expression:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'brand'</span><span class="p">,</span> <span class="s1">'match'</span><span class="p">,</span> <span class="s1">'[a-z]$'</span> <span class="p">)</span>
</code></pre></div></div>

<h3 id="not"><code class="highlighter-rouge">not</code></h3>

<p>We can combine <code class="highlighter-rouge">not</code> operator with other operators to negative the meaning of them. So we‚Äôll have <code class="highlighter-rouge">not contains</code>, <code class="highlighter-rouge">not in</code>, <code class="highlighter-rouge">not match</code>, <code class="highlighter-rouge">not starts with</code>, <code class="highlighter-rouge">not ends with</code>, <code class="highlighter-rouge">not between</code>.</p>

<h2 id="multiple-conditions">Multiple conditions</h2>

<p>Sometimes, you‚Äôll need to use more than one conditional logic. To do that, you can define multiple conditions to show or hide a meta box or a custom field. For example:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Visible when 'brand' is 'Apple' AND 'released_year' is between 2010 and 2015</span>
<span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
    <span class="k">array</span><span class="p">(</span> <span class="s1">'brand'</span><span class="p">,</span> <span class="s1">'Apple'</span> <span class="p">),</span>
    <span class="k">array</span><span class="p">(</span> <span class="s1">'released_year'</span><span class="p">,</span> <span class="s1">'between'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span> <span class="mi">2010</span><span class="p">,</span> <span class="mi">2015</span> <span class="p">)</span> <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<p>By default, if you define compound statement, the logic will correct if <strong>ALL</strong> of them are correct. In case you want to visible a field if <strong>ONE</strong> of them is correct, simply move all statements to <code class="highlighter-rouge">when</code> key and put new <code class="highlighter-rouge">relation</code> key like this example:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Visible when 'brand' is 'Apple' OR 'released_year' is between 2010 and 2015</span>
<span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">'when'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
         <span class="k">array</span><span class="p">(</span> <span class="s1">'brand'</span><span class="p">,</span> <span class="s1">'in'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'Apple'</span><span class="p">,</span> <span class="s1">'Microsoft'</span> <span class="p">)</span> <span class="p">),</span>
         <span class="k">array</span><span class="p">(</span> <span class="s1">'released_year'</span><span class="p">,</span> <span class="s1">'between'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span> <span class="mi">2010</span><span class="p">,</span> <span class="mi">2015</span> <span class="p">)</span> <span class="p">)</span>
     <span class="p">),</span>
     <span class="s1">'relation'</span> <span class="o">=&gt;</span> <span class="s1">'or'</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="getting-values-for-special-fields">Getting values for special fields</h2>

<p>This section shows you how to specify the <code class="highlighter-rouge">value</code> in the conditions for some specific fields.</p>

<h3 id="checkbox-field">Checkbox field</h3>

<p>For checkboxes, use <code class="highlighter-rouge">0</code> or <code class="highlighter-rouge">false</code> if it‚Äôs not checked, <code class="highlighter-rouge">1</code> or <code class="highlighter-rouge">true</code> if it‚Äôs checked.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'checkbox_field'</span><span class="p">,</span> <span class="kc">true</span> <span class="p">)</span> <span class="c1">// Visible if checkbox_field is checked</span>
</code></pre></div></div>

<h3 id="media-fields">Media fields</h3>

<p>For media fields that use WordPress media popup to handle upload like <code class="highlighter-rouge">file_advanced</code>, <code class="highlighter-rouge">image_advanced</code>, the extension checks <strong>number of uploaded files</strong> instead of their values.</p>

<p>This example shows or hides a field depends on there‚Äôs a file uploaded:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Visible when file_advanced field is has file</span>
<span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'file_advanced'</span><span class="p">,</span> <span class="s1">'&gt;'</span><span class="p">,</span> <span class="mi">0</span> <span class="p">)</span>

<span class="c1">// Or hidden if image_advanced doesn't contains anything</span>
<span class="s1">'hidden'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'image_advanced'</span><span class="p">,</span> <span class="mi">0</span> <span class="p">)</span>
</code></pre></div></div>

<h2 id="toggle-by-other-elements">Toggle by other elements</h2>

<p>Meta Box Conditional Logic can work with other HTML elements the same as Meta Box fields. With this feature, you can show or hide any meta box or field based on post types, page parent, post ID, categories‚Ä¶</p>

<p>To make it work with HTML element, instead of passing the field ID as the first parameter, please pass the <strong>element‚Äôs ID</strong>.</p>

<p>Here are the list of available built-in WordPress elements:</p>

<table>
  <thead>
    <tr>
      <th>Param</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">post_ID</code></td>
      <td>Post ID</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">page_template</code></td>
      <td>Page template</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">parent_id</code></td>
      <td>Parent post ID</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">post_format</code></td>
      <td>Post format</td>
    </tr>
  </tbody>
</table>

<p>Examples:</p>

<p>Display a meta box (or a field) if page template is <code class="highlighter-rouge">template-custom.php</code>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'page_template'</span><span class="p">,</span> <span class="s1">'template-custom.php'</span> <span class="p">)</span>
</code></pre></div></div>

<h3 id="featured-image">Featured image</h3>

<p>Featured image is a special HTML element. It has the field name/ID <code class="highlighter-rouge">_thumbnail_id</code> and when empty, WordPress sets the value to <code class="highlighter-rouge">-1</code>. Since version 1.5.3, the plugin can detect changes for featured image and let you define conditions with it.</p>

<p>Examples:</p>

<p>Make a field visible if no featured image:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'_thumbnail_id'</span><span class="p">,</span> <span class="s1">'='</span><span class="p">,</span> <span class="s1">'-1'</span> <span class="p">),</span>
</code></pre></div></div>

<p>Make a field visible if featured image is set:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'_thumbnail_id'</span><span class="p">,</span> <span class="s1">'!='</span><span class="p">,</span> <span class="s1">'-1'</span> <span class="p">),</span>
</code></pre></div></div>

<p>Or make a field visible only if featured image is a specific image with ID <code class="highlighter-rouge">123</code>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'_thumbnail_id'</span><span class="p">,</span> <span class="s1">'='</span><span class="p">,</span> <span class="s1">'123'</span> <span class="p">),</span>
</code></pre></div></div>

<h2 id="using-outside-meta-boxes">Using outside meta boxes</h2>

<p>The extension can even work with elements outside meta boxes. Let‚Äôs say you want to hide an element <code class="highlighter-rouge">.custom-div</code> when a field with ID <code class="highlighter-rouge">brand</code> is <code class="highlighter-rouge">Microsoft</code>, then you can do that with the following code:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">add_filter</span><span class="p">(</span> <span class="s1">'rwmb_outside_conditions'</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span> <span class="nv">$conditions</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nv">$conditions</span><span class="p">[</span><span class="s1">'.custom-div'</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">'hidden'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'brand'</span><span class="p">,</span> <span class="s1">'Microsoft'</span><span class="p">],</span>
        <span class="c1">// or you can write this for clarity</span>
        <span class="s1">'hidden'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'#brand'</span><span class="p">,</span> <span class="s1">'Microsoft'</span><span class="p">],</span>
    <span class="p">);</span>
    <span class="k">return</span> <span class="nv">$conditions</span><span class="p">;</span>
<span class="p">}</span> <span class="p">);</span>
</code></pre></div></div>

<p>Note that the <code class="highlighter-rouge">.custom-div</code> can be any CSS selector, like <code class="highlighter-rouge">#custom-id</code> or <code class="highlighter-rouge">.my-class .children</code>.</p>

<p>If you want to hide an element <code class="highlighter-rouge">.custom-div</code> based on a value of an input, which is not a Meta Box field, simply specify its ID as follows:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">add_filter</span><span class="p">(</span> <span class="s1">'rwmb_outside_conditions'</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span> <span class="nv">$conditions</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nv">$conditions</span><span class="p">[</span><span class="s1">'.custom-div'</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">'hidden'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'#input-id'</span><span class="p">,</span> <span class="s1">'value'</span><span class="p">],</span>
    <span class="p">);</span>
    <span class="k">return</span> <span class="nv">$conditions</span><span class="p">;</span>
<span class="p">}</span> <span class="p">);</span>
</code></pre></div></div>

<p>If you want to hide a tab created by <a href="https://metabox.io/plugins/meta-box-tabs/">Meta Box Tabs</a>, <a href="/hide-tabs-with-conditional-logic/">see this</a>.</p>

<h2 id="using-with-taxonomies">Using with taxonomies</h2>

<h3 id="post-category">Post category</h3>

<p>For post category, use <code class="highlighter-rouge">post_category</code> as the first parameter:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'post_category'</span><span class="p">,</span> <span class="s1">'in'</span><span class="p">,</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]]</span>
</code></pre></div></div>

<p>By default, the extension uses category IDs to check. Since 1.3, you can define the condition‚Äôs value using <code class="highlighter-rouge">slug</code>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'slug:post_category'</span><span class="p">,</span> <span class="s1">'in'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'fashion'</span><span class="p">,</span> <span class="s1">'gaming'</span><span class="p">,</span> <span class="s1">'technology'</span><span class="p">]]</span>
</code></pre></div></div>

<h3 id="post-tag">Post tag</h3>

<p>Support for post tag is added in version 1.6.5 and works only for Gutenberg editor.</p>

<p>To add conditions by post tag, use <code class="highlighter-rouge">tags</code> as the first parameter:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'tags'</span><span class="p">,</span> <span class="s1">'in'</span><span class="p">,</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]]</span>
</code></pre></div></div>

<p>Unlike post category, you have to use tag IDs.</p>

<h3 id="custom-taxonomies">Custom taxonomies</h3>

<p>For custom taxonomies, use <code class="highlighter-rouge">tax_input[taxonomy_slug]</code> as the first parameter:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'hidden'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'tax_input[product]'</span><span class="p">,</span> <span class="s1">'in'</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]],</span>
</code></pre></div></div>

<p>Similarly to post category, it works with <code class="highlighter-rouge">slug</code>, too.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'hidden'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'slug:tax_input[product]'</span><span class="p">,</span> <span class="s1">'!='</span><span class="p">,</span> <span class="s1">'drones'</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="custom-callback">Custom callback</h2>

<p>Since 1.3, you can set conditional logic with custom JavaScript callback, just put your function call in the first parameter. Like so:</p>

<p>In your JavaScript file:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Your custom JavaScript function that checks the condition</span>
<span class="kd">function</span> <span class="nx">my_custom_callback</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<p>In your PHP file:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'visible'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'my_custom_callback()'</span><span class="p">,</span> <span class="kc">true</span> <span class="p">)</span>
</code></pre></div></div>

<p>Please note that your function can return anything you want and you can use any operator to compare. For example</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Your js</span>
<span class="kd">function</span> <span class="nx">dummy_function</span><span class="p">(){</span> <span class="k">return</span> <span class="p">[</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">baz]; }
</span></code></pre></div></div>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Your field or meta box</span>
<span class="s1">'hidden'</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'dummy_function()'</span><span class="p">,</span> <span class="s1">'contains'</span><span class="p">,</span> <span class="s1">'bar'</span> <span class="p">);</span>
</code></pre></div></div>

<h2 id="toggle-types">Toggle types</h2>

<p>By default, we use jQuery <code class="highlighter-rouge">.show()</code> and <code class="highlighter-rouge">.hide()</code> method (which equivalent to CSS <code class="highlighter-rouge">display</code> property) to toggle elements. Imagine you have three fields named A, B, and C. So by default it will display vertical like so:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A
-
B
-
C
</code></pre></div></div>

<p>Or if you use Column extension, it will display horizontal like so:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A | B | C
</code></pre></div></div>

<p>What happen when field B is hidden? The field C will jump to B place, sometimes, you will want to keep the position of these field, so if field B is hidden, it should keep the blank space like so:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A
-

-
C
</code></pre></div></div>
<p>Or</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A | | C
</code></pre></div></div>

<p>So, basically, we have to use CSS <code class="highlighter-rouge">visibility</code> property instead of <code class="highlighter-rouge">display</code> property. To do so, just add <code class="highlighter-rouge">'toggle_type' =&gt; 'visibility'</code> to your Meta Box.</p>

<p>Since 1.5, we do support <code class="highlighter-rouge">slideUp</code>, <code class="highlighter-rouge">slideDown</code>, <code class="highlighter-rouge">fadeIn</code>, <code class="highlighter-rouge">fadeOut</code> animation. In order to use these animation just set <code class="highlighter-rouge">toggle_type</code> to <code class="highlighter-rouge">slide</code> or <code class="highlighter-rouge">fade</code>.</p>

<p>In short, we supports 4 toggle types to: <code class="highlighter-rouge">visibility</code>, <code class="highlighter-rouge">display</code>, <code class="highlighter-rouge">slide</code>, <code class="highlighter-rouge">fade</code>.</p>

<h2 id="known-issues">Known issues</h2>

<p>Conditional Logic doesn‚Äôt works with <a href="/fields/autocomplete/">autocomplete</a> field. We‚Äôll try to update in the next release.</p>
:ET