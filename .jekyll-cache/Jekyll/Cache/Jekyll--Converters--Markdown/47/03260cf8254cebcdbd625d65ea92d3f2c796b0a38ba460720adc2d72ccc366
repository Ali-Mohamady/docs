I"¤<h2 id="overview">Overview</h2>

<p>MB Frontend Submission is a Meta Box extension which lets developers create custom forms so users can submit posts on the front end of a website.</p>

<p>The extension supports both traditional post fields and custom fields, and you can also embed forms anywhere on your site using shortcodes â€” with no extra coding required.</p>

<p>Here is a screenshot of a front-end form:</p>

<p><img src="https://i.imgur.com/jfXHqSc.png" alt="submission form" /></p>

<p>MB Frontend Submission brings the meta boxes and custom fields to the front end. It supports all field types and all Meta Box extensions (columns, group, conditional logic, etc.).</p>

<p>Using this extension, you can create powerful forms for users to submit posts on the front end and control how it work effortlessly.</p>

<p>For more information, please see the <a href="https://metabox.io/plugins/mb-frontend-submission/">extension page</a>.</p>

<h2 id="installation">Installation</h2>
<p>Before installing the extension, you need to install Meta Box plugin first.</p>

<ol>
  <li>Go to <em>Plugins â†’ Add New</em> and search for <strong>Meta Box</strong></li>
  <li>Click <strong>Install Now</strong> button to install the plugin</li>
  <li>After installing, click <strong>Activate Plugin</strong> to activate the plugin</li>
</ol>

<p>The extension is just a WordPress plugin, you can install it like a normal WordPress plugin.</p>

<ol>
  <li>Go to <em>Plugins</em>, click <strong>Add new</strong>, then click <strong>Upload plugin</strong>.</li>
  <li>Choose the <code class="highlighter-rouge">.zip</code> file you downloaded and click <strong>Install now</strong></li>
  <li>After finishing upload, click <strong>Activate</strong> to finish.</li>
</ol>

<p><strong>Important:</strong> This extension requires Meta Box version 4.11+. If youâ€™re using an older version of the plugin, please update.</p>

<h2 id="creating-post-forms">Creating post forms</h2>

<h3 id="simple-form">Simple form</h3>

<p>To create a simple front-end forms, simply put this shortcode in a page content:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nx">mb_frontend_form</span> <span class="nx">post_fields</span><span class="o">=</span><span class="s2">"title,content"</span><span class="p">]</span>
</code></pre></div></div>

<p>This shortcode will create a simple post form which has only 2 fields: post title and post content.</p>

<h3 id="advanced-form">Advanced form</h3>

<p>If you want to add more fields to the post form (which are custom fields), then you need to <a href="/creating-meta-boxes/">create a meta box first</a>. That meta box should contains all the custom fields you want to add to the post.</p>

<p>Then change the shortcode to:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nx">mb_frontend_form</span> <span class="nx">id</span><span class="o">=</span><span class="s2">"meta-box-id"</span> <span class="nx">post_fields</span><span class="o">=</span><span class="s2">"title,content"</span><span class="p">]</span>
</code></pre></div></div>

<p>If you want to embed the form using code, please use the following code:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$form</span> <span class="o">=</span> <span class="s1">'mb_frontend_form id="meta-box-id" post_fields="title,content"]'</span><span class="p">;</span>
<span class="k">echo</span> <span class="nx">do_shortcode</span><span class="p">(</span> <span class="nv">$form</span> <span class="p">);</span>
</code></pre></div></div>

<h2 id="shortcode-attributes">Shortcode attributes</h2>

<table>
  <thead>
    <tr>
      <th>Attributes</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">id</code></td>
      <td>Meta box ID(s). If multiple meta boxes, enter their IDs separated by commas.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">ajax</code></td>
      <td>Enable Ajax submission. <code class="highlighter-rouge">true</code> or <code class="highlighter-rouge">false</code> (default).</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">edit</code></td>
      <td>Allo users to edit the post after submitting. <code class="highlighter-rouge">true</code> or <code class="highlighter-rouge">false</code> (default).</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">allow_delete</code></td>
      <td>Allo users to delete the submitted post. <code class="highlighter-rouge">true</code> or <code class="highlighter-rouge">false</code> (default).</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">force_delete</code></td>
      <td>Whether to delete the submitted post permanently or temporarily (move to Trash).</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">post_type</code></td>
      <td>The submitted post type. Optional. Default is the first post type defined in the meta box. If meta box is made for multiple post types, you should set this attribute to the correct one.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">post_id</code></td>
      <td>The post ID. Optional. Used when you want to update an existing post. If you want to pass the ID of the current post, set it to <code class="highlighter-rouge">current</code>.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">post_status</code></td>
      <td>The status for submitted posts. See <a href="https://codex.wordpress.org/Post_Status">the list here</a>.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">post_fields</code></td>
      <td>List of post fields you want to show in the frontend, separated by comma. Supported following fields: <code class="highlighter-rouge">title</code>, <code class="highlighter-rouge">content</code>, <code class="highlighter-rouge">excerpt</code>, <code class="highlighter-rouge">date</code>, <code class="highlighter-rouge">thumbnail</code>.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">label_title</code></td>
      <td>Label for post title field.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">label_content</code></td>
      <td>Label for post content field.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">label_excerpt</code></td>
      <td>Label for post excerpt field.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">label_date</code></td>
      <td>Label for post date field.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">label_thumbnail</code></td>
      <td>Label for post thumbnail field.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">submit_button</code></td>
      <td>The submit button text.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">delete_button</code></td>
      <td>The delete button text.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">redirect</code></td>
      <td>Custom redirect URL.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">confirmation</code></td>
      <td>The text for the confirmation message when the form is successfully submitted.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">delete_confirmation</code></td>
      <td>The text for the confirmation message when the post is deleted.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">recaptcha_key</code></td>
      <td>Google reCaptcha site key (version 3). Optional.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">recaptcha_secret</code></td>
      <td>Google reCaptcha secret key (version 3). Optional.</td>
    </tr>
  </tbody>
</table>

<h2 id="dynamic-population">Dynamic population</h2>

<p>In order to make the frontend form flexible, sometimes itâ€™s more convenient to set the shortcode attributes via code or something else rather than fixed it in above format.</p>

<p>The dyanamic population feature in MB Frontend Submission extension allows you to dynamically populate a shortcode attribute with a value. This value can be passed via query string and/or hook.</p>

<h3 id="query-string">Query string</h3>

<p>You can populate post ID for the shortcode via the query string by appending the dynamic population parameter for the attribute to the end of your form URL along with your custom value.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://siteurl.com/form-url/?rwmb_frontend_field_post_id=123
</code></pre></div></div>

<p>The query parameter is <code class="highlighter-rouge">rwmb_frontend_field_post_id</code>.</p>

<p>Note that <em>only</em> post ID is supported for populating via query string since version 2.2.0.</p>

<h3 id="hooks">Hooks</h3>

<p>Shortcode attributes can also be populated via WordPress hooks. This example below change the <code class="highlighter-rouge">post_id</code> to <code class="highlighter-rouge">123</code>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">add_filter</span><span class="p">(</span> <span class="s1">'rwmb_frontend_field_value_post_id'</span><span class="p">,</span> <span class="s1">'my_custom_population_function'</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span>
<span class="k">function</span> <span class="nf">my_custom_population_function</span><span class="p">(</span> <span class="nv">$value</span><span class="p">,</span> <span class="nv">$args</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span> <span class="nv">$args</span><span class="p">[</span><span class="s1">'id'</span><span class="p">]</span> <span class="o">===</span> <span class="s1">'your_meta_box_id'</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">// Only filter for a specific form.</span>
        <span class="nv">$value</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This snippet would be pasted in your themeâ€™s <code class="highlighter-rouge">functions.php</code> file or your pluginâ€™s PHP file.</p>

<p>The filter has the following format:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$value</span> <span class="o">=</span> <span class="nx">apply_filters</span><span class="p">(</span> <span class="s2">"rwmb_frontend_field_value_</span><span class="si">{</span><span class="nv">$attribute</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span> <span class="nv">$value</span><span class="p">,</span> <span class="nv">$args</span> <span class="p">);</span>
</code></pre></div></div>

<p>The callback function accepts 2 parameters: the attribute value and the array of all attributes. You should use <code class="highlighter-rouge">$args['id]</code> to check if youâ€™re filter for the right form.</p>

<h2 id="post-template-files">Post template files</h2>

<p>The plugin allows you to use a custom template files for post fields and the confirmation message (the fields defined by Meta Box is controlled by the Meta Box plugin and canâ€™t be changed).</p>

<p>The plugin will look for a template file with the following order:</p>

<ul>
  <li>Inside a folder <code class="highlighter-rouge">mb-frontend-submission</code> of your child theme</li>
  <li>Inside a folder <code class="highlighter-rouge">mb-frontend-submission</code> of your parent theme</li>
  <li>In the pluginâ€™s <code class="highlighter-rouge">templates</code> folder</li>
</ul>

<p>In order to overwrite the output of post fields, please following the steps below:</p>

<ul>
  <li>Create a folder <code class="highlighter-rouge">mb-frontend-submission</code> in your theme.</li>
  <li>Copy a template file that you want to change from pluginsâ€™s <code class="highlighter-rouge">templates</code> folder to the new <code class="highlighter-rouge">mb-frontend-submission</code> folder, keeping the same folder structure.</li>
  <li>Modify the new template file.</li>
</ul>

<h2 id="reorder-post-fields">Reorder post fields</h2>

<p>Sometimes you want to mix post fields with the custom fields, or change post content to <code class="highlighter-rouge">textarea</code> field. You can do that with the following steps:</p>

<ul>
  <li>Remove the <code class="highlighter-rouge">post_fields</code> attribute from the shortcode</li>
  <li>Add post fields as normal custom fields to your meta box settings, like this:</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$meta_boxes</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'title'</span>  <span class="o">=&gt;</span> <span class="s1">'Bill Submit'</span><span class="p">,</span>
    <span class="s1">'id'</span>     <span class="o">=&gt;</span> <span class="s1">'bill'</span><span class="p">,</span>
    <span class="s1">'fields'</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="p">[</span>
            <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Submission Date'</span><span class="p">,</span>
            <span class="s1">'id'</span>   <span class="o">=&gt;</span> <span class="s1">'submission_date'</span><span class="p">,</span>
            <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="s1">'date'</span><span class="p">,</span>
        <span class="p">],</span>
        <span class="p">[</span>
            <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Title'</span><span class="p">,</span>
            <span class="s1">'id'</span>   <span class="o">=&gt;</span> <span class="s1">'post_title'</span><span class="p">,</span> <span class="c1">// THIS</span>
        <span class="p">],</span>
        <span class="p">[</span>
            <span class="s1">'name'</span>    <span class="o">=&gt;</span> <span class="s1">'Type'</span><span class="p">,</span>
            <span class="s1">'id'</span>      <span class="o">=&gt;</span> <span class="s1">'type'</span><span class="p">,</span>
            <span class="s1">'type'</span>    <span class="o">=&gt;</span> <span class="s1">'select'</span><span class="p">,</span>
            <span class="s1">'options'</span> <span class="o">=&gt;</span> <span class="p">[</span>
                <span class="s1">'docs'</span>    <span class="o">=&gt;</span> <span class="s1">'Document'</span><span class="p">,</span>
                <span class="s1">'receipt'</span> <span class="o">=&gt;</span> <span class="s1">'Receipt'</span><span class="p">,</span>
            <span class="p">],</span>
        <span class="p">],</span>
        <span class="p">[</span>
            <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Description'</span><span class="p">,</span>
            <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="s1">'textarea'</span><span class="p">,</span>
            <span class="s1">'id'</span>   <span class="o">=&gt;</span> <span class="s1">'post_content'</span><span class="p">,</span> <span class="c1">// THIS</span>
        <span class="p">],</span>
        <span class="p">[</span>
            <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Thumbnail'</span><span class="p">,</span>
            <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="s1">'single_image'</span><span class="p">,</span>
            <span class="s1">'id'</span>   <span class="o">=&gt;</span> <span class="s1">'_thumbnail_id'</span><span class="p">,</span> <span class="c1">// THIS</span>
        <span class="p">],</span>
    <span class="p">],</span>
<span class="p">]</span>
</code></pre></div></div>

<p>In order to make the plugin recognize the post fields, you need to set correct ID for them. See the table below:</p>

<table>
  <thead>
    <tr>
      <th>Field</th>
      <th>ID</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Post title</td>
      <td><code class="highlighter-rouge">post_title</code></td>
    </tr>
    <tr>
      <td>Post content</td>
      <td><code class="highlighter-rouge">post_content</code></td>
    </tr>
    <tr>
      <td>Post excerpt</td>
      <td><code class="highlighter-rouge">post_excerpt</code></td>
    </tr>
    <tr>
      <td>Post date</td>
      <td><code class="highlighter-rouge">post_date</code></td>
    </tr>
    <tr>
      <td>Post thumbnail</td>
      <td><code class="highlighter-rouge">_thumbnail_id</code></td>
    </tr>
  </tbody>
</table>

<p>With this method, youâ€™re able to set the label for post fields, or change settings (even field type) for them easily using any Meta Box <a href="/field-settings">field settings</a>.</p>

<h2 id="validation">Validation</h2>

<p>There are 2 ways to validate fields: on the front end with JavaScript and on the back end with PHP.</p>

<p>For front-end validation with JavaScript, please see <a href="https://docs.metabox.io/validation/">this documentation</a>.</p>

<p>To validate on the back end with PHP, please use the <code class="highlighter-rouge">rwmb_frontend_validate</code> filter as follows:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">add_filter</span><span class="p">(</span> <span class="s1">'rwmb_frontend_validate'</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span> <span class="nv">$validate</span><span class="p">,</span> <span class="nv">$config</span> <span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Check only if you're on the right form.</span>
    <span class="k">if</span> <span class="p">(</span> <span class="s1">'your-meta-box-id'</span> <span class="o">!==</span> <span class="nv">$config</span><span class="p">[</span><span class="s1">'id'</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$validate</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// Check if users have selected files for an image upload field.</span>
    <span class="k">if</span> <span class="p">(</span> <span class="nb">empty</span><span class="p">(</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">'image_upload_field'</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nv">$validate</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// Return false to show an error message.</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$validate</span><span class="p">;</span>
<span class="p">},</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span>
</code></pre></div></div>

<p>If you want to show a custom error message, simply return a string for the filter, like this:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">add_filter</span><span class="p">(</span> <span class="s1">'rwmb_frontend_validate'</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span> <span class="nv">$validate</span><span class="p">,</span> <span class="nv">$config</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span> <span class="s1">'your-meta-box-id'</span> <span class="o">!==</span> <span class="nv">$config</span><span class="p">[</span><span class="s1">'id'</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$validate</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span> <span class="nb">empty</span><span class="p">(</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">'image_upload_field'</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nv">$validate</span> <span class="o">=</span> <span class="s1">'Please select at least one image to upload'</span><span class="p">;</span> <span class="c1">// Return a custom error message</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$validate</span><span class="p">;</span>
<span class="p">},</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span>
</code></pre></div></div>

<h2 id="user-posts-dashboard">User Posts Dashboard</h2>

<p>To let users <strong>view and edit their submitted posts</strong>, just create a normal WordPress page, and insert the following shortcode into the page content:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nx">mb_frontend_dashboard</span> <span class="nx">edit_page</span><span class="o">=</span><span class="s2">"124"</span><span class="p">]</span>
</code></pre></div></div>

<p>Where <code class="highlighter-rouge">124</code> is the ID of the page, where you already have to let users submit posts. And when users visit this page, theyâ€™ll see a dashboard like this:</p>

<p><img src="https://i.imgur.com/LxPh4xH.png" alt="user posts dashboard" /></p>

<p>On this dashboard, users can:</p>

<ul>
  <li>View list of their submitted posts with the corresponding statuses</li>
  <li>Edit or delete submitted posts</li>
  <li>Or submit a new post</li>
</ul>

<p>Thereâ€™s no settings or coding required from users!</p>

<p>And the plugin is smart enough to detect the correct settings from the submission form to correct posts. So you can have <em>multiple</em> submission forms and multiple dashboards on a same website.</p>

<h2 id="hooks-1">Hooks</h2>

<p>In order to allow developers to do other things when the form is submitted, we have created some actions and filters.</p>

<h3 id="general-hooks">General hooks</h3>

<p><code class="highlighter-rouge">rwmb_frontend_redirect</code></p>

<p>This filter allows you to change the URL of the redirect page after form is submitted. It accepts 1 parameter <code class="highlighter-rouge">$config</code> - the shortcode attributes.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$redirect</span> <span class="o">=</span> <span class="nx">apply_filters</span><span class="p">(</span> <span class="s1">'rwmb_frontend_redirect'</span><span class="p">,</span> <span class="nv">$redirect</span><span class="p">,</span> <span class="nv">$config</span> <span class="p">);</span>
</code></pre></div></div>

<p>Note that <code class="highlighter-rouge">$config['post_id']</code> has the submitted post ID.</p>

<h3 id="form-actions">Form actions</h3>

<p><code class="highlighter-rouge">rwmb_frontend_before_process</code></p>

<p>This action fires before the form is processed, e.g. saved or updated. It accepts one parameter <code class="highlighter-rouge">$config</code> - the form configuration, taken from the shortcode attributes.</p>

<p><code class="highlighter-rouge">rwmb_frontend_after_process</code></p>

<p>This action fires after the form is processed, e.g. saved or updated. It accepts 2 parameters:</p>

<ul>
  <li><code class="highlighter-rouge">$config</code> - the form configuration, taken from the shortcode attributes.</li>
  <li><code class="highlighter-rouge">$post_id</code> - the submitted post ID</li>
</ul>

<p>You can use this action to do a custom redirect to your Thank you page or send an email notification.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">add_action</span><span class="p">(</span> <span class="s1">'rwmb_frontend_after_process'</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span> <span class="nv">$config</span><span class="p">,</span> <span class="nv">$post_id</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span> <span class="s1">'my-meta-box'</span> <span class="o">===</span> <span class="nv">$config</span><span class="p">[</span><span class="s1">'id'</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nx">wp_mail</span><span class="p">(</span> <span class="s1">'admin@domain.com'</span><span class="p">,</span> <span class="s1">'New submission'</span><span class="p">,</span> <span class="s1">'A new post has been just submitted.'</span> <span class="p">);</span>

        <span class="nx">wp_safe_redirect</span><span class="p">(</span> <span class="s1">'thank-you'</span> <span class="p">);</span>
        <span class="k">die</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">},</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">rwmb_frontend_before_form</code></p>

<p>This action fires before form output. It accepts one parameter <code class="highlighter-rouge">$config</code> - the form configuration, taken from the shortcode attributes.</p>

<p><code class="highlighter-rouge">rwmb_frontend_after_form</code></p>

<p>This action fires after form output. It accepts one parameter <code class="highlighter-rouge">$config</code> - the form configuration, taken from the shortcode attributes.</p>

<p><code class="highlighter-rouge">rwmb_frontend_before_display_confirmation</code></p>

<p>This action fires before the confirmation message is displayed. It accepts one parameter <code class="highlighter-rouge">$config</code> - the form configuration, taken from the shortcode attributes.</p>

<p><code class="highlighter-rouge">rwmb_frontend_after_display_confirmation</code></p>

<p>This action fires after the confirmation message is displayed. It accepts one parameter <code class="highlighter-rouge">$config</code> - the form configuration, taken from the shortcode attributes.</p>

<p><code class="highlighter-rouge">rwmb_frontend_before_submit_button</code></p>

<p>This action fires before the submit button is displayed. It accepts one parameter <code class="highlighter-rouge">$config</code> - the form configuration, taken from the shortcode attributes.</p>

<p><code class="highlighter-rouge">rwmb_frontend_after_submit_button</code></p>

<p>This action fires after the submit button is displayed. It accepts one parameter <code class="highlighter-rouge">$config</code> - the form configuration, taken from the shortcode attributes.</p>

<h3 id="form-filters">Form filters</h3>

<p><code class="highlighter-rouge">rwmb_frontend_validate</code></p>

<p>This filter is used to check if the form is validated. You can use this filter to add custom check for the data before itâ€™s processed.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">apply_filters</span><span class="p">(</span> <span class="s1">'rwmb_frontend_validate'</span><span class="p">,</span> <span class="nv">$validate</span><span class="p">,</span> <span class="nv">$config</span> <span class="p">);</span>
</code></pre></div></div>

<p>The filter has 2 parameter:</p>

<ul>
  <li><code class="highlighter-rouge">$validate</code>: the returned value of validation. If <code class="highlighter-rouge">true</code>, then the validation is successful. <code class="highlighter-rouge">false</code> - if not and the plugin will show a default error message. If you want to show a custom error message, just return it as a string. See the <strong>Validation</strong> section above.</li>
  <li><code class="highlighter-rouge">$config</code>: the form configuration.</li>
</ul>

<h3 id="post-data-filters">Post data filters</h3>

<p><code class="highlighter-rouge">rwmb_frontend_insert_post_data</code></p>

<p>This filter is used to modify the submitted post data before itâ€™s passed to the <code class="highlighter-rouge">wp_insert_post</code> function to <strong>create a new post</strong>. It accepts 2 parameters: the array of post data and the shortcode parameters.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$data</span> <span class="o">=</span> <span class="nx">apply_filters</span><span class="p">(</span> <span class="s1">'rwmb_frontend_insert_post_data'</span><span class="p">,</span> <span class="nv">$data</span><span class="p">,</span> <span class="nv">$config</span> <span class="p">);</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">rwmb_frontend_update_post_data</code></p>

<p>This filter is used to modify the submitted post data before itâ€™s passed to the <code class="highlighter-rouge">wp_update_post</code> function to <strong>update an existing post</strong>. It accepts 2 parameters: the array of post data and the shortcode parameters.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$data</span> <span class="o">=</span> <span class="nx">apply_filters</span><span class="p">(</span> <span class="s1">'rwmb_frontend_update_post_data'</span><span class="p">,</span> <span class="nv">$data</span><span class="p">,</span> <span class="nv">$config</span> <span class="p">);</span>
</code></pre></div></div>

<h3 id="post-field-filters">Post field filters</h3>

<p>Sometimes you want to add more things to the post fields, such as make post title required, add description for post content, or even add a custom HTML before the post thumbnail. You can do that with the following post filter:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Post title</span>
<span class="nv">$field</span> <span class="o">=</span> <span class="nx">apply_filters</span><span class="p">(</span> <span class="s1">'rwmb_frontend_post_title'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="s1">'text'</span><span class="p">,</span>
    <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Title'</span><span class="p">,</span>
    <span class="s1">'id'</span>   <span class="o">=&gt;</span> <span class="s1">'post_title'</span><span class="p">,</span>
<span class="p">)</span> <span class="p">);</span>

<span class="c1">// Post thumbnail</span>
<span class="nv">$field</span> <span class="o">=</span> <span class="nx">apply_filters</span><span class="p">(</span> <span class="s1">'rwmb_frontend_post_thumbnail'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">'type'</span>             <span class="o">=&gt;</span> <span class="s1">'image'</span><span class="p">,</span>
    <span class="s1">'name'</span>             <span class="o">=&gt;</span> <span class="s1">'Thumbnail'</span><span class="p">,</span>
    <span class="s1">'id'</span>               <span class="o">=&gt;</span> <span class="s1">'_thumbnail_id'</span><span class="p">,</span>
    <span class="s1">'max_file_uploads'</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
<span class="p">)</span> <span class="p">);</span>

<span class="c1">// Post excerpt</span>
<span class="nv">$field</span>   <span class="o">=</span> <span class="nx">apply_filters</span><span class="p">(</span> <span class="s1">'rwmb_frontend_post_excerpt'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="s1">'textarea'</span><span class="p">,</span>
    <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Excerpt'</span><span class="p">,</span>
    <span class="s1">'id'</span>   <span class="o">=&gt;</span> <span class="s1">'post_excerpt'</span><span class="p">,</span>
<span class="p">)</span> <span class="p">);</span>

<span class="c1">// Post date</span>
<span class="nv">$field</span> <span class="o">=</span> <span class="nx">apply_filters</span><span class="p">(</span> <span class="s1">'rwmb_frontend_post_date'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="s1">'datetime'</span><span class="p">,</span>
    <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Date'</span><span class="p">,</span>
    <span class="s1">'id'</span>   <span class="o">=&gt;</span> <span class="s1">'post_date'</span><span class="p">,</span>
<span class="p">)</span> <span class="p">);</span>

<span class="c1">// Post content</span>
<span class="nv">$field</span>   <span class="o">=</span> <span class="nx">apply_filters</span><span class="p">(</span> <span class="s1">'rwmb_frontend_post_content'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="s1">'wysiwyg'</span><span class="p">,</span>
    <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Content'</span><span class="p">,</span>
    <span class="s1">'id'</span>   <span class="o">=&gt;</span> <span class="s1">'post_content'</span><span class="p">,</span>
<span class="p">)</span> <span class="p">);</span>
</code></pre></div></div>

<p>Each post field is treated as a normal Meta Box field (see here for full list of <a href="/docs/field-settings/">field attributes</a>).</p>

<p>So, to make the post title required, you can do like this:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">add_filter</span><span class="p">(</span> <span class="s1">'rwmb_frontend_post_title'</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span> <span class="nv">$field</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nv">$field</span><span class="p">[</span><span class="s1">'required'</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="k">return</span> <span class="nv">$field</span><span class="p">;</span>
<span class="p">}</span> <span class="p">);</span>
</code></pre></div></div>

<h3 id="post-actions">Post actions</h3>

<p><code class="highlighter-rouge">rwmb_frontend_before_save_post</code></p>

<p>This action fires before the post is created or updated.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>do_action( 'rwmb_frontend_before_save_post', $object );
</code></pre></div></div>

<p>The action accepts 1 parameter: the instance of the <code class="highlighter-rouge">MB_Frontend_Post</code> class, which handles the submission. It has the following public properties that you can use:</p>

<ul>
  <li><code class="highlighter-rouge">$post_type</code>: The current post type</li>
  <li><code class="highlighter-rouge">$post_id</code>: The submitted post ID</li>
  <li><code class="highlighter-rouge">$fields</code>: The post fields</li>
  <li><code class="highlighter-rouge">$config</code>: The configuration, taken from the shortcode attributes</li>
</ul>

<p><code class="highlighter-rouge">rwmb_frontend_after_save_post</code></p>

<p>This action fires after the post is created or updated. At that time, all the custom fields in the meta box are already saved into the post meta.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>do_action( 'rwmb_frontend_after_save_post', $object );
</code></pre></div></div>

<p>The action accepts 1 parameter: the instance of the <code class="highlighter-rouge">MB_Frontend_Post</code> class, which handles the submission. It has the following public properties that you can use:</p>

<ul>
  <li><code class="highlighter-rouge">$post_type</code>: The current post type</li>
  <li><code class="highlighter-rouge">$post_id</code>: The submitted post ID</li>
  <li><code class="highlighter-rouge">$fields</code>: The post fields</li>
  <li><code class="highlighter-rouge">$config</code>: The configuration, taken from the shortcode attributes</li>
</ul>

<h2 id="upload-files--images-with-the-media-popup">Upload files / images with the media popup</h2>

<p>To be able to upload files or images with the media popup (via fields <code class="highlighter-rouge">file_advanced</code>, <code class="highlighter-rouge">file_upload</code>, <code class="highlighter-rouge">image_advanced</code>, <code class="highlighter-rouge">image_upload</code>), users have to login and proper capability <code class="highlighter-rouge">upload_files</code> to access the Media Library. If your users donâ€™t have that capability (if they have subscriber role), then the upload fields donâ€™t work. In that case, you can add the capability for that role as follows:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="nf">mb_allow_subscriber_uploads</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span> <span class="nx">is_admin</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Replace 'subscriber' with the required role to update, can also be contributor.</span>
    <span class="nv">$subscriber</span> <span class="o">=</span> <span class="nx">get_role</span><span class="p">(</span> <span class="s1">'subscriber'</span> <span class="p">);</span>
    <span class="nv">$subscriber</span><span class="o">-&gt;</span><span class="na">add_cap</span><span class="p">(</span> <span class="s1">'upload_files'</span> <span class="p">);</span>
<span class="p">}</span>
<span class="nx">add_action</span><span class="p">(</span> <span class="s1">'init'</span><span class="p">,</span> <span class="s1">'mb_allow_subscriber_uploads'</span> <span class="p">);</span>
</code></pre></div></div>

<p>Another solution is using <code class="highlighter-rouge">file</code> or <code class="highlighter-rouge">image</code> fields. Both of them works similar. They just donâ€™t have a nice UI, but they do the job very well.</p>

<h2 id="use-the-media-popup-for-post-thumbnail">Use the media popup for post thumbnail</h2>

<p>Another improvement you might want to add is use the media popup to pick an image as the post thumbnail. By default, it uses <code class="highlighter-rouge">image</code> field, which provides a simple input for image.</p>

<p>To do that, you need to change the field type for thumbnail from <code class="highlighter-rouge">image</code> to <code class="highlighter-rouge">single_image</code>. Here are the steps:</p>

<ul>
  <li>Create a folder <code class="highlighter-rouge">mb-frontend-submission</code> in your theme, inside that folder, create a sub-folder <code class="highlighter-rouge">post</code>.</li>
  <li>Copy the file <code class="highlighter-rouge">thumbnail.php</code> from the pluginâ€™s <code class="highlighter-rouge">templates/post</code> folder to the <code class="highlighter-rouge">post</code> folder above.</li>
  <li>Replace the content of the copied <code class="highlighter-rouge">thumbnail.php</code> with <a href="https://pastebin.com/6AFcPF7b">this code</a>.</li>
</ul>

<p>Please note that, in order to open the media popup, users need to log in and have proper capability. See the section above for how to do that.</p>

<h2 id="notes">Notes</h2>

<h3 id="styling">Styling</h3>

<p>The extension outputs the default fieldsâ€™ HTML with CSS comes from Meta Box plugin. The style is basic and works in most cases. However, to make it match perfectly with your themeâ€™s style, you need to do some work with CSS.</p>

<h3 id="caching">Caching</h3>

<p>As you might know, Meta Box uses <a href="https://codex.wordpress.org/WordPress_Nonces">nonces</a> to prevent misuse or malicious requests. As the nonce fields are outputted directly in the HTML, they might be cached by caching plugins such as W3 Total Cache, WP Super Cache, etc. And thus, the verification of the nonce might not work properly and break the form submission. In this case, please do not cache the page where the form is embeded (both caching plugins allow you to do that). For more information, please read this <a href="https://myatus.com/p/wordpress-caching-and-nonce-lifespan/">technical article</a>.</p>

<h2 id="tutorials">Tutorials</h2>

<ul>
  <li><a href="https://metabox.io/mb-frontend-submission-dashboard-ajax-recaptcha/">MB Frontend Submission: Dashboard, Ajax, reCaptcha &amp; More</a></li>
  <li>How to Add Guest Author in WordPress using Meta Box: <a href="https://metabox.io/p1-add-guest-author-in-wordpress/">Part 1</a> &amp; <a href="https://metabox.io/p2-add-guest-author-in-wordpress/">Part 2</a>.</li>
  <li><a href="https://metabox.io/create-classified-ads-website-using-meta-box/">How to Create a Classified Ads Website using Meta Box</a></li>
</ul>
:ET