I"»[<h2 id="overview">Overview</h2>

<p>The <strong>MB Custom Table</strong> extension helps you to save custom fieldsâ€™ values to custom table instead of the default WordPress meta table. All custom fields for a post are saved in a single row, where and each column contains the value of a corresponding field.</p>

<p>This reduces the number of rows in the database which can cause a performance issue when the data grows. And let you have all of your data in one place, so you can easily view, edit, import, export it.</p>

<p><img src="https://i.imgur.com/BzE1Fvx.png" alt="custom table overview" /></p>

<p>For more information, please see the <a href="https://metabox.io/plugins/mb-custom-table/">extension page</a>.</p>

<h2 id="installation">Installation</h2>
<p>Before installing the extension, you need to install Meta Box plugin first.</p>

<ol>
  <li>Go to <em>Plugins â†’ Add New</em> and search for <strong>Meta Box</strong></li>
  <li>Click <strong>Install Now</strong> button to install the plugin</li>
  <li>After installing, click <strong>Activate Plugin</strong> to activate the plugin</li>
</ol>

<p>The extension is just a WordPress plugin, you can install it like a normal WordPress plugin.</p>

<ol>
  <li>Go to <em>Plugins</em>, click <strong>Add new</strong>, then click <strong>Upload plugin</strong>.</li>
  <li>Choose the <code class="highlighter-rouge">.zip</code> file you downloaded and click <strong>Install now</strong></li>
  <li>After finishing upload, click <strong>Activate</strong> to finish.</li>
</ol>

<p><strong>Important:</strong> This extension requires Meta Box version 4.12.3+. If youâ€™re using an older version of the plugin, please update.</p>

<h2 id="video-tutorial">Video Tutorial</h2>

<p>Here is a quick video tutorial on how to use the plugin:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/o8ICxe8nbrI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<h2 id="creating-custom-tables">Creating custom tables</h2>

<p>To create a custom table, you can do it manually by following <a href="https://codex.wordpress.org/Creating_Tables_with_Plugins">this guide</a> or using the API that the extension provides. The API simplifies the process and makes it easier for you.</p>

<p>This code creates a simple table for 3 custom fields (<em>each custom field is a column</em>):</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">add_action</span><span class="p">(</span> <span class="s1">'init'</span><span class="p">,</span> <span class="s1">'prefix_create_table'</span> <span class="p">);</span>
<span class="k">function</span> <span class="nf">prefix_create_table</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nb">class_exists</span><span class="p">(</span> <span class="s1">'MB_Custom_Table_API'</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">MB_Custom_Table_API</span><span class="o">::</span><span class="na">create</span><span class="p">(</span> <span class="s1">'my_custom_table'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">'address'</span> <span class="o">=&gt;</span> <span class="s1">'TEXT NOT NULL'</span><span class="p">,</span>
        <span class="s1">'phone'</span>   <span class="o">=&gt;</span> <span class="s1">'TEXT NOT NULL'</span><span class="p">,</span>
        <span class="s1">'email'</span>   <span class="o">=&gt;</span> <span class="s1">'VARCHAR(20) NOT NULL'</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here we hook to <code class="highlighter-rouge">init</code> to make sure the API is ready to use. For more details about the hooks or which hook you should use, see section <strong>Notes</strong> below.</p>

<p>The code will generate a SQL query for creating a custom table like this:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$sql</span> <span class="o">=</span> <span class="s2">"CREATE TABLE my_custom_table (
  ID int(11) unsigned NOT NULL,
  addresss TEXT NOT NULL,
  phone TEXT NOT NULL,
  email VARCHAR(20) NOT NULL
  PRIMARY KEY  (ID)
)"</span><span class="p">;</span>
</code></pre></div></div>

<div class="alert">
	
		<svg class="icon icon-info" aria-hidden="true" role="img"><use href="#icon-info" xlink:href="#icon-info"></use></svg>
	
	<p><strong>Important:</strong> Column key has to match your custom fieldsâ€™ IDs, one column per custom field. If you create a column to store a group, then the column key must be the top-level group ID. No need to create column for sub-fields.</p>

</div>

<div class="alert">
	
		<svg class="icon icon-info" aria-hidden="true" role="img"><use href="#icon-info" xlink:href="#icon-info"></use></svg>
	
	<p>Column data types are MySQLâ€™s. You can see the list of data types <a href="https://dev.mysql.com/doc/refman/8.0/en/data-types.html">here</a>.</p>

</div>

<p>Note that the <strong><code class="highlighter-rouge">ID</code> column is automatically created</strong>. Itâ€™s used to store the object ID for future reference. Object ID can be post ID, user ID or term ID, depends on what meta type the table is used for.</p>

<p>If you want to set keys for columns, just add the 3rd parameter:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">MB_Custom_Table_API</span><span class="o">::</span><span class="na">create</span><span class="p">(</span> <span class="s1">'my_custom_table'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">'address'</span> <span class="o">=&gt;</span> <span class="s1">'TEXT NOT NULL'</span><span class="p">,</span>
    <span class="s1">'phone'</span>   <span class="o">=&gt;</span> <span class="s1">'TEXT NOT NULL'</span><span class="p">,</span>
    <span class="s1">'email'</span>   <span class="o">=&gt;</span> <span class="s1">'VARCHAR(20) NOT NULL'</span><span class="p">,</span>
<span class="p">),</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'email'</span> <span class="p">)</span> <span class="p">);</span>
</code></pre></div></div>

<p>Which generates:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$sql</span> <span class="o">=</span> <span class="s2">"CREATE TABLE my_custom_table (
  ID int(11) unsigned NOT NULL,
  addresss TEXT NOT NULL,
  phone TEXT NOT NULL,
  email VARCHAR(20) NOT NULL
  PRIMARY KEY  (ID)
  KEY email
)"</span><span class="p">;</span>
</code></pre></div></div>

<div class="alert">
	
		<svg class="icon icon-info" aria-hidden="true" role="img"><use href="#icon-info" xlink:href="#icon-info"></use></svg>
	
	<p>BLOB and TEXT columns also can be indexed, but a fixed length must be given. Make sure you set the length when you want to index a text column.</p>

</div>

<h3 id="parameters">Parameters</h3>

<p>The API function takes 3 parameters as follows:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">MB_Custom_Table_API</span><span class="o">::</span><span class="na">create</span><span class="p">(</span> <span class="nv">$table_name</span><span class="p">,</span> <span class="nv">$columns</span><span class="p">,</span> <span class="nv">$keys</span> <span class="o">=</span> <span class="k">array</span><span class="p">()</span> <span class="p">);</span>
</code></pre></div></div>

<p>Where:</p>

<table>
  <thead>
    <tr>
      <th>Parameter</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">table_name</code></td>
      <td>The custom table name. Required.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">columns</code></td>
      <td>Array of table columns, where key is the column ID and value is the column definition (similar in SQL). Required.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">keys</code></td>
      <td>Array of key column IDs. These columns will be indexed. Optional.</td>
    </tr>
  </tbody>
</table>

<h3 id="notes">Notes</h3>

<p>A. <strong>Do not add ID column</strong>: The ID column is automatically added to the list of columns and set as primary key in the table. Itâ€™s used to store the object ID (post, user, term) for future reference.</p>

<p>B. The <strong>column key must match custom fieldsâ€™ IDs</strong>.</p>

<p>C. The <strong>table name doesnâ€™t contain WordPress table prefix</strong>. The extension do not put any constrains for you to define the table name. If you want to use WordPress table prefix, you can do like this:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
<span class="nx">MB_Custom_Table_API</span><span class="o">::</span><span class="na">create</span><span class="p">(</span> <span class="s2">"</span><span class="si">{</span><span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">prefix</span><span class="si">}</span><span class="s2">my_custom_table"</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">'address'</span> <span class="o">=&gt;</span> <span class="s1">'TEXT NOT NULL'</span><span class="p">,</span>
    <span class="s1">'phone'</span>   <span class="o">=&gt;</span> <span class="s1">'TEXT NOT NULL'</span><span class="p">,</span>
    <span class="s1">'email'</span>   <span class="o">=&gt;</span> <span class="s1">'VARCHAR(20) NOT NULL'</span><span class="p">,</span>
<span class="p">)</span> <span class="p">);</span>
</code></pre></div></div>

<p>D. You should <strong>check for the class existence</strong> before running the function, like this:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nb">class_exists</span><span class="p">(</span> <span class="s1">'MB_Custom_Table_API'</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">MB_Custom_Table_API</span><span class="o">::</span><span class="na">create</span><span class="p">(</span> <span class="s1">'my_custom_table'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">'address'</span> <span class="o">=&gt;</span> <span class="s1">'TEXT NOT NULL'</span><span class="p">,</span>
    <span class="s1">'phone'</span>   <span class="o">=&gt;</span> <span class="s1">'TEXT NOT NULL'</span><span class="p">,</span>
    <span class="s1">'email'</span>   <span class="o">=&gt;</span> <span class="s1">'VARCHAR(20) NOT NULL'</span><span class="p">,</span>
<span class="p">),</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'email'</span> <span class="p">)</span> <span class="p">);</span>
</code></pre></div></div>

<p>E. The extension uses WordPress recommended method to create custom table, which means if the table already exists, the code will do nothing. Although, <strong>itâ€™s recommended to run the code that create custom tables <a href="https://codex.wordpress.org/Creating_Tables_with_Plugins#Calling_the_functions">only when activate your plugin</a></strong>, like this:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">register_activation_hook</span><span class="p">(</span> <span class="k">__FILE__</span><span class="p">,</span> <span class="s1">'prefix_create_table'</span> <span class="p">);</span>
<span class="k">function</span> <span class="nf">prefix_create_table</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nb">class_exists</span><span class="p">(</span> <span class="s1">'MB_Custom_Table_API'</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">MB_Custom_Table_API</span><span class="o">::</span><span class="na">create</span><span class="p">(</span> <span class="s1">'my_custom_table'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">'address'</span> <span class="o">=&gt;</span> <span class="s1">'TEXT NOT NULL'</span><span class="p">,</span>
        <span class="s1">'phone'</span>   <span class="o">=&gt;</span> <span class="s1">'TEXT NOT NULL'</span><span class="p">,</span>
        <span class="s1">'email'</span>   <span class="o">=&gt;</span> <span class="s1">'VARCHAR(20) NOT NULL'</span><span class="p">,</span>
    <span class="p">),</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'email'</span> <span class="p">)</span> <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>But for some reason, if you canâ€™t run the code when activate your plugin, itâ€™s totally fine to run the code in <code class="highlighter-rouge">init</code> or <code class="highlighter-rouge">plugins_loaded</code> hook:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">add_action</span><span class="p">(</span> <span class="s1">'init'</span><span class="p">,</span> <span class="s1">'prefix_create_table'</span> <span class="p">);</span>
<span class="k">function</span> <span class="nf">prefix_create_table</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nb">class_exists</span><span class="p">(</span> <span class="s1">'MB_Custom_Table_API'</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">MB_Custom_Table_API</span><span class="o">::</span><span class="na">create</span><span class="p">(</span> <span class="s1">'my_custom_table'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">'address'</span> <span class="o">=&gt;</span> <span class="s1">'TEXT NOT NULL'</span><span class="p">,</span>
        <span class="s1">'phone'</span>   <span class="o">=&gt;</span> <span class="s1">'TEXT NOT NULL'</span><span class="p">,</span>
        <span class="s1">'email'</span>   <span class="o">=&gt;</span> <span class="s1">'VARCHAR(20) NOT NULL'</span><span class="p">,</span>
    <span class="p">),</span> <span class="k">array</span><span class="p">(</span> <span class="s1">'email'</span> <span class="p">)</span> <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="using-custom-tables">Using custom tables</h2>

<p>To tell a meta box to use a custom table to store custom fields instead of default meta tables, you need to specify 2 parameters <code class="highlighter-rouge">storage_type</code> and <code class="highlighter-rouge">table</code> like this:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">add_filter</span><span class="p">(</span> <span class="s1">'rwmb_meta_boxes'</span><span class="p">,</span> <span class="s1">'your_prefix_register_meta_boxes'</span> <span class="p">);</span>
<span class="k">function</span> <span class="nf">your_prefix_register_meta_boxes</span><span class="p">(</span> <span class="nv">$meta_boxes</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nv">$meta_boxes</span><span class="p">[]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">'title'</span>        <span class="o">=&gt;</span> <span class="s1">'Meta Box Title'</span><span class="p">,</span>
        <span class="s1">'storage_type'</span> <span class="o">=&gt;</span> <span class="s1">'custom_table'</span><span class="p">,</span>    <span class="c1">// Important</span>
        <span class="s1">'table'</span>        <span class="o">=&gt;</span> <span class="s1">'my_custom_table'</span><span class="p">,</span> <span class="c1">// Your custom table name</span>
        <span class="s1">'fields'</span>       <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span>
                <span class="s1">'id'</span>   <span class="o">=&gt;</span> <span class="s1">'address'</span><span class="p">,</span>
                <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="s1">'text'</span><span class="p">,</span>
                <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Address'</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="k">array</span><span class="p">(</span>
                <span class="s1">'id'</span>   <span class="o">=&gt;</span> <span class="s1">'phone'</span><span class="p">,</span>
                <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="s1">'text'</span><span class="p">,</span>
                <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Phone'</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="k">array</span><span class="p">(</span>
                <span class="s1">'id'</span>   <span class="o">=&gt;</span> <span class="s1">'email'</span><span class="p">,</span>
                <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="s1">'email'</span><span class="p">,</span>
                <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Email'</span><span class="p">,</span>
            <span class="p">),</span>
        <span class="p">),</span>
    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="alert">
	
		<svg class="icon icon-info" aria-hidden="true" role="img"><use href="#icon-info" xlink:href="#icon-info"></use></svg>
	
	<p><strong>Again:</strong> Column key has to match your custom fieldsâ€™ IDs, one column per custom field. If you create a column to store a group, then the column key must be the top-level group ID. No need to create column for sub-fields.</p>

</div>

<p>Now you can go to edit post screen (or edit user profile if you use the meta box for user profile page) and save the post. Youâ€™ll see the data is saved in the new custom table instead of meta tables.</p>

<h2 id="getting-field-value">Getting field value</h2>

<p>You can use the helper <a href="/rwmb-meta/">rwmb_meta()</a> function to get field value. The only difference is you need to specify the table name in the 2nd argument:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$value</span> <span class="o">=</span> <span class="nx">rwmb_meta</span><span class="p">(</span> <span class="nv">$field_id</span><span class="p">,</span> <span class="p">[</span><span class="s1">'storage_type'</span> <span class="o">=&gt;</span> <span class="s1">'custom_table'</span><span class="p">,</span> <span class="s1">'table'</span> <span class="o">=&gt;</span> <span class="nv">$table_name</span><span class="p">]</span> <span class="p">);</span>
<span class="k">echo</span> <span class="nv">$value</span><span class="p">;</span>
</code></pre></div></div>

<p>Also note that the call to the custom table will be cached, e.g. if you call the helper function several times for the same <code class="highlighter-rouge">$post_id</code>, it will only query once. This technique will improve the database performance.</p>

<h2 id="group-fields">Group fields</h2>

<p>For group fields, itâ€™s worth mentioning that the whole group value, including sub-fieldsâ€™ values, is saved as a serialized array in <em>one</em> column. So, theyâ€™re not flat as other fields.</p>

<p>That means:</p>

<ul>
  <li>When you create a table, please create only one column for the group (even that group contains many sub-fields or sub-groups). And the column key must be the group ID.</li>
  <li>The group value is serialized, you cannot make SQL query agains the sub-fieldsâ€™ values. Thus, you donâ€™t benefit from the custom table structure. So, be careful to make decision what fields should be in groups, what fields should not. Itâ€™s recommended to use groups only for <em>data storing, not for querying</em>.</li>
</ul>

<p>While the data of the group is serialized, it will be unserialized when getting via helper functions. So you donâ€™t have to unserialize yourself.</p>

<h2 id="query-posts-with-wp_query">Query posts with WP_Query</h2>

<p>Itâ€™s important to understand that the plugin doesnâ€™t hook to the <code class="highlighter-rouge">WP_Query</code> to get posts by custom fields stored in the custom table. In other words, using <code class="highlighter-rouge">meta_*</code> in <code class="highlighter-rouge">WP_Query</code> for custom fields wonâ€™t work.</p>

<p>In order to get posts by custom fields in the custom table, you need to make an extra query to get the post IDs first. Then use these IDs to get full post objects.</p>

<p>Here is an example:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">global</span> <span class="nv">$wpdb</span><span class="p">;</span>
<span class="nv">$ids</span> <span class="o">=</span> <span class="nv">$wpdb</span><span class="o">-&gt;</span><span class="na">get_col</span><span class="p">(</span> <span class="s2">"SELECT ID FROM your_table WHERE field1 = 'value1' OR field2 = 'value2'"</span> <span class="p">);</span>

<span class="k">if</span> <span class="p">(</span> <span class="nb">empty</span><span class="p">(</span> <span class="nv">$ids</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="s1">'There is no posts'</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nv">$query</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WP_Query</span><span class="p">(</span> <span class="p">[</span>
        <span class="s1">'post_type'</span> <span class="o">=&gt;</span> <span class="s1">'post'</span><span class="p">,</span>
        <span class="s1">'post__in'</span>  <span class="o">=&gt;</span> <span class="nv">$ids</span><span class="p">,</span>
    <span class="p">]</span> <span class="p">);</span>
    <span class="c1">// Do something</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This technique also works with terms and users.</p>
:ET